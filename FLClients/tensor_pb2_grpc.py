# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tensor_pb2 as tensor__pb2


class FederatedLearningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiateFlTraining = channel.unary_unary(
                '/grpc.FederatedLearning/InitiateFlTraining',
                request_serializer=tensor__pb2.ClientCredentials.SerializeToString,
                response_deserializer=tensor__pb2.FLInitializationParameters_.FromString,
                )
        self.GlobalModel = channel.unary_unary(
                '/grpc.FederatedLearning/GlobalModel',
                request_serializer=tensor__pb2.Empty.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )
        self.LocalModel = channel.unary_unary(
                '/grpc.FederatedLearning/LocalModel',
                request_serializer=tensor__pb2.Model.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )
        self.TrailFunction = channel.unary_unary(
                '/grpc.FederatedLearning/TrailFunction',
                request_serializer=tensor__pb2.ClientCredentials.SerializeToString,
                response_deserializer=tensor__pb2.FLInitializationParameters_.FromString,
                )
        self.TransmitInitializationParams = channel.unary_unary(
                '/grpc.FederatedLearning/TransmitInitializationParams',
                request_serializer=tensor__pb2.ClientCredentials.SerializeToString,
                response_deserializer=tensor__pb2.TrainingModelAndInitializationParams.FromString,
                )
        self.ExecuteFunction = channel.unary_unary(
                '/grpc.FederatedLearning/ExecuteFunction',
                request_serializer=tensor__pb2.FunctionAgs.SerializeToString,
                response_deserializer=tensor__pb2.FunctionReturns.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/grpc.FederatedLearning/Heartbeat',
                request_serializer=tensor__pb2.ClientCredentials.SerializeToString,
                response_deserializer=tensor__pb2.FunctionReturns.FromString,
                )
        self.ClientRegistration = channel.unary_unary(
                '/grpc.FederatedLearning/ClientRegistration',
                request_serializer=tensor__pb2.RegistrationParams.SerializeToString,
                response_deserializer=tensor__pb2.RegistrationResponse.FromString,
                )
        self.GetNumberOfClients = channel.unary_unary(
                '/grpc.FederatedLearning/GetNumberOfClients',
                request_serializer=tensor__pb2.Empty.SerializeToString,
                response_deserializer=tensor__pb2.Empty.FromString,
                )
        self.StartTraining = channel.unary_unary(
                '/grpc.FederatedLearning/StartTraining',
                request_serializer=tensor__pb2.ClientCredentials.SerializeToString,
                response_deserializer=tensor__pb2.FunctionReturns.FromString,
                )
        self.GetPandasStore = channel.unary_unary(
                '/grpc.FederatedLearning/GetPandasStore',
                request_serializer=tensor__pb2.PandasStore.SerializeToString,
                response_deserializer=tensor__pb2.Empty.FromString,
                )
        self.TheMessageCPU = channel.unary_unary(
                '/grpc.FederatedLearning/TheMessageCPU',
                request_serializer=tensor__pb2.Model.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )
        self.TheMessageMemory = channel.unary_unary(
                '/grpc.FederatedLearning/TheMessageMemory',
                request_serializer=tensor__pb2.Model.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )
        self.TheMessageNW = channel.unary_unary(
                '/grpc.FederatedLearning/TheMessageNW',
                request_serializer=tensor__pb2.Model.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )
        self.TheMessageDisk = channel.unary_unary(
                '/grpc.FederatedLearning/TheMessageDisk',
                request_serializer=tensor__pb2.Model.SerializeToString,
                response_deserializer=tensor__pb2.Model.FromString,
                )


class FederatedLearningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitiateFlTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GlobalModel(self, request, context):
        """rpc GetLocalModel (Empty) returns (stream Model); // the call which is streaming (open connection)
        the call which is streaming (open connection)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LocalModel(self, request, context):
        """rpc SendGlobalModel (stream Model) returns (Empty);

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrailFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransmitInitializationParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientRegistration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNumberOfClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPandasStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TheMessageCPU(self, request, context):
        """Added for parallel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TheMessageMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TheMessageNW(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TheMessageDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitiateFlTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateFlTraining,
                    request_deserializer=tensor__pb2.ClientCredentials.FromString,
                    response_serializer=tensor__pb2.FLInitializationParameters_.SerializeToString,
            ),
            'GlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GlobalModel,
                    request_deserializer=tensor__pb2.Empty.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
            'LocalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.LocalModel,
                    request_deserializer=tensor__pb2.Model.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
            'TrailFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.TrailFunction,
                    request_deserializer=tensor__pb2.ClientCredentials.FromString,
                    response_serializer=tensor__pb2.FLInitializationParameters_.SerializeToString,
            ),
            'TransmitInitializationParams': grpc.unary_unary_rpc_method_handler(
                    servicer.TransmitInitializationParams,
                    request_deserializer=tensor__pb2.ClientCredentials.FromString,
                    response_serializer=tensor__pb2.TrainingModelAndInitializationParams.SerializeToString,
            ),
            'ExecuteFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteFunction,
                    request_deserializer=tensor__pb2.FunctionAgs.FromString,
                    response_serializer=tensor__pb2.FunctionReturns.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=tensor__pb2.ClientCredentials.FromString,
                    response_serializer=tensor__pb2.FunctionReturns.SerializeToString,
            ),
            'ClientRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.ClientRegistration,
                    request_deserializer=tensor__pb2.RegistrationParams.FromString,
                    response_serializer=tensor__pb2.RegistrationResponse.SerializeToString,
            ),
            'GetNumberOfClients': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNumberOfClients,
                    request_deserializer=tensor__pb2.Empty.FromString,
                    response_serializer=tensor__pb2.Empty.SerializeToString,
            ),
            'StartTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTraining,
                    request_deserializer=tensor__pb2.ClientCredentials.FromString,
                    response_serializer=tensor__pb2.FunctionReturns.SerializeToString,
            ),
            'GetPandasStore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPandasStore,
                    request_deserializer=tensor__pb2.PandasStore.FromString,
                    response_serializer=tensor__pb2.Empty.SerializeToString,
            ),
            'TheMessageCPU': grpc.unary_unary_rpc_method_handler(
                    servicer.TheMessageCPU,
                    request_deserializer=tensor__pb2.Model.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
            'TheMessageMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.TheMessageMemory,
                    request_deserializer=tensor__pb2.Model.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
            'TheMessageNW': grpc.unary_unary_rpc_method_handler(
                    servicer.TheMessageNW,
                    request_deserializer=tensor__pb2.Model.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
            'TheMessageDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.TheMessageDisk,
                    request_deserializer=tensor__pb2.Model.FromString,
                    response_serializer=tensor__pb2.Model.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.FederatedLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FederatedLearning(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitiateFlTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/InitiateFlTraining',
            tensor__pb2.ClientCredentials.SerializeToString,
            tensor__pb2.FLInitializationParameters_.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/GlobalModel',
            tensor__pb2.Empty.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LocalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/LocalModel',
            tensor__pb2.Model.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrailFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TrailFunction',
            tensor__pb2.ClientCredentials.SerializeToString,
            tensor__pb2.FLInitializationParameters_.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransmitInitializationParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TransmitInitializationParams',
            tensor__pb2.ClientCredentials.SerializeToString,
            tensor__pb2.TrainingModelAndInitializationParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/ExecuteFunction',
            tensor__pb2.FunctionAgs.SerializeToString,
            tensor__pb2.FunctionReturns.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/Heartbeat',
            tensor__pb2.ClientCredentials.SerializeToString,
            tensor__pb2.FunctionReturns.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/ClientRegistration',
            tensor__pb2.RegistrationParams.SerializeToString,
            tensor__pb2.RegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNumberOfClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/GetNumberOfClients',
            tensor__pb2.Empty.SerializeToString,
            tensor__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/StartTraining',
            tensor__pb2.ClientCredentials.SerializeToString,
            tensor__pb2.FunctionReturns.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPandasStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/GetPandasStore',
            tensor__pb2.PandasStore.SerializeToString,
            tensor__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TheMessageCPU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TheMessageCPU',
            tensor__pb2.Model.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TheMessageMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TheMessageMemory',
            tensor__pb2.Model.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TheMessageNW(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TheMessageNW',
            tensor__pb2.Model.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TheMessageDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.FederatedLearning/TheMessageDisk',
            tensor__pb2.Model.SerializeToString,
            tensor__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
